package com.metl.comet

import net.liftweb._
import common._
import http._
import util._
import Helpers._
import HttpHelpers._
import actor._
import scala.xml._
import com.metl.model._
import SHtml._

import js._
import JsCmds._
import JE._

import json.JsonAST._

object ClientUpdate{
  def unapply(json:JValue) = json match{
    case JObject(List(JField("command",JString(command)), JField("params",args))) => Some(command,args)
    case _ => None
  }
}
object JNum{
  def unapply(json:JValue) = json match{
    case JInt(x) => Some(x.toDouble)
    case JDouble(x) => Some(x)
    case _ => None
  }
}

object MeTLActorManager extends LiftActor with ListenerManager {
  def createUpdate = HealthyWelcomeFromRoom
  override def lowPriority = {
    case _ => println("MeTLActorManager received unknown message")
  }
}

class MeTLActor extends CometActor with CometListener{
  private val userUniqueId = nextFuncName
  private val GET_HISTORY = "getHistory"
  private val GET_SEARCH_RESULT = "getSearchResult"
  private val GET_USER_OPTIONS = "getUserOptions"
  private val GET_RESOURCE = "getResource"
  private val JOIN_ROOM = "joinRoom"
  private val LEAVE_ROOM = "leaveRoom"
  private val SEND_STANZA = "sendStanza"
  private val CHANGE_USER = "changeUser"
	private val ADD_SLIDE = "addSlide"
	private val CREATE_CONVERSATION = "createConversation"
  private var rooms = Map.empty[Tuple2[String,String],MeTLRoom]
  private lazy val serverConfig = ServerConfiguration.default
  private lazy val server = serverConfig.name
  private lazy val username = Globals.currentUser.is
  private val serializer = new JsonSerializer("frontend")
  def registerWith = MeTLActorManager
  def render = NodeSeq.Empty
  override def fixedRender = Stopwatch.time("MeTLActor.fixedRender", () => functions)
  override def lowPriority = {
    case roomInfo:RoomStateInformation => Stopwatch.time("MeTLActor.lowPriority.RoomStateInformation", () => updateRooms(roomInfo))
    case metlStanza:MeTLStanza => Stopwatch.time("MeTLActor.lowPriority.MeTLStanza", () => sendMeTLStanzaToPage(metlStanza))
    case HealthyWelcomeFromRoom => {}
    case other => println("MeTLActor received unknown message: %s".format(other))
  }
  override def autoIncludeJsonCode = true
  override def localSetup = Stopwatch.time("MeTLActor.localSetup(%s,%s)".format(username,userUniqueId), () => {
    super.localSetup()
    MeTLXConfiguration.getRoom(username,server) ! JoinRoom(username,userUniqueId,this)
	//	MeTLXConfiguration.getRoom("localLoopback","transientMadam") ! JoinRoom(username,userUniqueId,this)
  })
  override def localShutdown = Stopwatch.time("MeTLActor.localShutdown(%s,%s)".format(username,userUniqueId), () => {
    rooms.foreach(r => {
      r._2 ! LeaveRoom(username,userUniqueId,this)
    })
    super.localShutdown()
  })
  override def lifespan = Full(1 minute)
  val functions = NodeSeq.fromSeq(List(
    Script(Function(JOIN_ROOM,List("slide"),jsonSend(JOIN_ROOM,JsRaw("slide")))),
    Script(Function(LEAVE_ROOM,List("slide"),jsonSend(LEAVE_ROOM,JsRaw("slide")))),
    Script(Function(GET_HISTORY,List("slide"),jsonSend(GET_HISTORY,JsRaw("slide")))),
    Script(Function(GET_SEARCH_RESULT,List("query"),jsonSend(GET_SEARCH_RESULT,JsRaw("query")))),
    Script(Function(GET_USER_OPTIONS,List("username"),jsonSend(GET_USER_OPTIONS,JsRaw("username")))),
    Script(Function(GET_RESOURCE,List("source"),jsonSend(GET_HISTORY,JsRaw("source")))),
    Script(Function(SEND_STANZA,List("xml"),jsonSend(SEND_STANZA,JsRaw("xml")))),
    Script(Function(CHANGE_USER,List("username"),jsonSend(CHANGE_USER,JsRaw("username")))),
		Script(Function(CREATE_CONVERSATION,List("title"),jsonSend(CREATE_CONVERSATION,JsRaw("title")))),
		Script(Function(ADD_SLIDE,List("index"),jsonSend(CREATE_CONVERSATION,JsRaw("index"))))
  ))
  override def receiveJson = {
    case ClientUpdate(JOIN_ROOM,JString(where)) => Stopwatch.time("MeTLActor.receiveJson.joinRoom", () => joinRoom(where))
    case ClientUpdate(LEAVE_ROOM,JString(where)) => Stopwatch.time("MeTLActor.receiveJson.leaveRoom", () => leaveRoom(where))
    case ClientUpdate(GET_HISTORY,JString(where)) => Stopwatch.time("MeTLActor.receiveJson.getHistory", () => getHistory(where))
    case ClientUpdate(GET_SEARCH_RESULT,JString(query)) => Stopwatch.time("MeTLActor.receiveJson.getSearchResult", () => getSearchResult(query))
    case ClientUpdate(GET_USER_OPTIONS,JString(username)) => Stopwatch.time("MeTLActor.receiveJson.getUserOptions", () => getUserOptions(username))
    case ClientUpdate(GET_RESOURCE,JString(source)) => Stopwatch.time("MeTLActor.receiveJson.getResource", () => getResource(source))
    case ClientUpdate(SEND_STANZA,jval) => Stopwatch.time("MeTLActor.receiveJson.sendStanza", () => sendStanzaToServer(jval))
		case ClientUpdate(CHANGE_USER,JString(username)) => Stopwatch.time("MeTLActor.receiveJson.changeUser", () => changeUser(username))
		case ClientUpdate(CREATE_CONVERSATION,JString(title)) => Stopwatch.time("MeTLActor.receiveJson.createConversation", () => createConversation(title))
		case ClientUpdate(ADD_SLIDE,JInt(index)) => Stopwatch.time("MeTLActor.receiveJson.addSlide", () => addSlideToCurrentConversation(index.toInt))
    case other => println("receiveJson: %s".format(other))
  }
  private def updateRooms(roomInfo:RoomStateInformation):Unit = Stopwatch.time("MeTLActor.updateRooms", () => {
    roomInfo match {
      case RoomJoinAcknowledged(server,room) => rooms = rooms.updated((server,room),MeTLXConfiguration.getRoom(room,server))
      case RoomLeaveAcknowledged(server,room) => rooms = rooms.filterNot(r => r._1 == (server,room))
      case _ => {}
    }
  })
  private def sendStanzaToServer(jVal:JValue) = Stopwatch.time("MeTLActor.sendStanzaToServer", () => {
    serializer.toMeTLStanza(jVal) match {
      case c:MeTLCanvasContent => {
//				println("sending: %s".format(c))
        val roomId = c.privacy match {
					case Privacy.PUBLIC => c.slide
					case Privacy.PRIVATE => c.slide+username
					case _ => {
						println("unexpected privacy found in: %s".format(c))
						c.slide
					}
				}
				println("sendRoom: %s in %s".format((server,roomId),rooms)) 
/*				rooms(("transientMadam","localLoopback")) match {
					case r:MeTLRoom => {
						r ! LocalToServerMeTLStanza(c)
					}
          case _ => println("you're not in that room")

				}
*/
				rooms((server,roomId)) match {
          case r:MeTLRoom => {
						r ! LocalToServerMeTLStanza(c)
					}
          case _ => println("you're not in that room")
        }
      }
			case other => {
				println("sendStanzaToServer's toMeTLStanza returned unknown type when deserializing: %s".format(other))
			}
    }
  })
  private def sendMeTLStanzaToPage(metlStanza:MeTLStanza):Unit = Stopwatch.time("MeTLActor.sendMeTLStanzaToPage", () => {
		println("receiving: %s".format(metlStanza))
    val response = serializer.fromMeTLStanza(metlStanza) match {
      case j:JValue => j
      case other => JString(other.toString)
    }
    partialUpdate(Call("receiveMeTLStanza",response))
  })
	private def addSlideToCurrentConversation(index:Int) = {
// partialUpdate(Call("receiveUpdatedConversation",serializer.fromConversation(serverConfig.updateConversation(Globals.currentConversation))))	
	}
	private def createConversation(title:String) = {
		partialUpdate(Call("receiveNewConversation",serializer.fromConversation(serverConfig.createConversation(title))))
	}
  private def joinRoom(where:String):Unit = Stopwatch.time("MeTLActor.joinRoom", () => {
    MeTLXConfiguration.getRoom(where,server) ! JoinRoom(username,userUniqueId,this)
    MeTLXConfiguration.getRoom(where+username,server) ! JoinRoom(username,userUniqueId,this)
  })
  private def leaveRoom(where:String):Unit = Stopwatch.time("MeTLActor.leaveRoom", () => {
    MeTLXConfiguration.getRoom(where,server) ! LeaveRoom(username,userUniqueId,this)
    MeTLXConfiguration.getRoom(where+username,server) ! LeaveRoom(username,userUniqueId,this)
  })
  private def changeUser(username:String):Unit = Stopwatch.time("MeTLActor.changeUser", () => {
    Globals.currentUser(username)
    partialUpdate(Call("receiveUsername",JString(Globals.currentUser.is)))
  })
  private def getHistory(reqRoom:String):Unit = Stopwatch.time("MeTLActor.getHistory", () => {
    val response = serializer.fromHistory(MeTLXConfiguration.getRoom(reqRoom,server).getHistory) match {
      case j:JValue => j
      case other => JString(other.toString)
    }
    partialUpdate(Call("receiveHistory",response))
  })
  private def getSearchResult(query:String):Unit = Stopwatch.time("MeTLActor.getSearchResult", () => {
    val response = serializer.fromConversationList(serverConfig.searchForConversation(query)) match {
      case j:JValue => j
      case other => JString(other.toString)
    }
    partialUpdate(Call("receiveConversations",response))
  })
  private def getUserOptions(username:String):Unit = Stopwatch.time("MeTLActor.getUserOptions", () => {
    val message = "jsonCall: getUserOptions(%s)".format(username)
    partialUpdate(Alert(message))
  })
  private def getResource(source:String):Unit = Stopwatch.time("MeTLActor.getResource", () => {
    val message = "jsonCall: getResource(%s)".format(source)
    partialUpdate(Alert(message))
  })
}
